name: CI
on:
  # We would like to trigger for CI for any pull request action -
  # both from QuantCo's branches as well as forks.
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
  # In addition to pull requests, we want to run CI for pushes
  # to the main branches and tags.
  push:
    branches:
      - 'main'
      - 'pre-commit-autoupdate'
    tags:
      - 'v*'


jobs:

  pre-commit-checks:
    name: Pre-commit checks - Python 3.8
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Run pre-commit-conda
        uses: quantco/pre-commit-conda@v1
        with:
          python-version: "3.8"

  unit-tests:
    name: "unit tests - ${{ matrix.environment-file }}"
    runs-on: ubuntu-latest
    env:
      CI: True
    strategy:
      fail-fast: true
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
          - .conda_lock_files/python38_sa2_linux64.yml
          - .conda_lock_files/python312_sa1_linux64.yml
          - .conda_lock_files/python312_sa2_linux64.yml
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          args: "tests/unit"

  mssql:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'sqlserver') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "mssql - ${{ matrix.environment-file }}"
    runs-on: ubuntu-20.04
    env:
      CI: True
    strategy:
      fail-fast: false
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
          - .conda_lock_files/python38_sa2_linux64.yml
          - .conda_lock_files/python312_sa1_linux64.yml
          - .conda_lock_files/python312_sa2_linux64.yml
    services:
      DB:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: datajudge-123
        ports:
          - 1433:1433
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            pyodbc
      # TODO: Consider removing this manual installation since the docker image already comes with a msodbc driver.
      - name: Install msodbcsql17 driver
        shell: bash -l {0}
        run: |
          wget https://packages.microsoft.com/ubuntu/20.04/prod/pool/main/m/msodbcsql17/msodbcsql17_17.9.1.1-1_amd64.deb
          ACCEPT_EULA=Y sudo apt install ./msodbcsql17_17.9.1.1-1_amd64.deb --allow-downgrades
      - name: Wait for SQL Server
        timeout-minutes: 1
        run: until docker logs "${{ job.services.db.id }}" 2>&1 | grep -q "SQL Server is now ready"; do sleep 10; done
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: mssql
          args: tests/integration

  postgres:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'postgres') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "PostgreSQL ${{ matrix.postgres-version }} - ${{ matrix.environment-file }}"
    runs-on: ubuntu-20.04
    env:
      CI: True
    strategy:
      fail-fast: false
      matrix:
        postgres-version: [ '11', 'latest' ]
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
          - .conda_lock_files/python38_sa2_linux64.yml
          - .conda_lock_files/python312_sa1_linux64.yml
          - .conda_lock_files/python312_sa2_linux64.yml
    services:
      DB:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: datajudge
          POSTGRES_PASSWORD: datajudge
          POSTGRES_DB: datajudge
        ports:
          - 5432:5432
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4      
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            psycopg2
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: postgres
          args: tests/integration


  db2:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'db2') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "DB2 - ${{ matrix.environment-file }}"
    runs-on: ubuntu-20.04
    env:
      CI: True
    strategy:
      fail-fast: false
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
          - .conda_lock_files/python312_sa1_linux64.yml
    services:
      DB:
        image: ibmcom/db2:11.5.5.1
        env:
          LICENSE: accept
          DB2INSTANCE: db2inst1
          DB2INST1_PASSWORD: password
          DBNAME: testdb
          UPDATEAVAIL: "NO"
        options: --privileged
        ports:
          - 50000:50000
        
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            ibm_db
            ibm_db_sa
      - name: Wait for db2 to load
        timeout-minutes: 2
        run: until docker logs "${{ job.services.db.id }}" 2>&1 | grep -q 'Setup has completed.'; do sleep 5; done
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: db2
          args: tests/integration
      


  snowflake:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'snowflake') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "Snowflake - ${{ matrix.environment-file }}"
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_USER: DATAJUDGE
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
    strategy:
      fail-fast: false
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            snowflake-sqlalchemy
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: snowflake
          args: tests/integration

  bigquery:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'bigquery') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "BigQuery - ${{ matrix.environment-file }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            sqlalchemy-bigquery
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@a6e2e39c0a0331da29f7fd2c2a20a427e8d3ad1f'
        with:
          credentials_json: '${{ secrets.GCP_KEY }}'
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: bigquery
          args: -n auto tests/integration

  impala-column:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'impala') || contains(github.event.pull_request.labels.*.name, 'ready') || github.ref == 'refs/heads/main' }}
    name: "Impala - ${{ matrix.environment-file }}"
    runs-on: ubuntu-20.04
    env:
      CI: True
    strategy:
      fail-fast: false
      matrix:
        environment-file:
          - .conda_lock_files/python38_sa1_linux64.yml
        pytest-args: ["tests/integration/test_column_capitalization.py", "tests/integration/test_data_source.py", "tests/integration/test_integration.py -k row", "tests/integration/test_integration.py -k uniques", "tests/integration/test_integration.py -k date", "tests/integration/test_integration.py -k varchar", "tests/integration/test_integration.py -k numeric"]

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
      - name: Set up micromamba
        uses: mamba-org/setup-micromamba@8767fb704bd78032e9392f0386bf46950bdd1194
        with:
          environment-file: ${{ matrix.environment-file }}
          cache-downloads: true
          cache-environment: true
          cache-environment-key: ${{ runner.os }}-${{ hashFiles(matrix.environment-file) }}
          create-args: >-
            impyla
      - name: Set up container
        run: docker compose up --wait impala
      - name: Run tests
        uses: ./.github/actions/pytest
        with:
          backend: impala
          args: ${{ matrix.pytest-args }}
