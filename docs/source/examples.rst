Development
===========


The repository comes with a development environment file. We suggest to use ``conda``
and ``mamba``.

In order to get going, you can run

::

    # Clone the repository
    git clone git@github.com:Quantco/pytsql.git
    cd pytsql

    # Set up a conda environment with name "pytsql" and activate it.
    mamba env create
    conda activate pytsql

    # Set up our pre-commit hooks for black, mypy, isort and flake8.
    pre-commit install

    # Install this package in editable mode.
    pip install --no-build-isolation -e .


Unit tests
----------

``pytsql`` comes with some unit tests. Provided that the environment has been set
up as illustrated in the previous step, they can be run as such:

::

    conda activate pytsql
    cd pytsql
    pytest tests/unit/


Integration tests
-----------------

In addition to very modular unit tests, ``pytsql`` also comes with some integration
tests against a database. In order to locally start a dockerized mssql database, you can
just execute the ``start_mssql.sql`` script provided.

Once the docker container is up and running, you can run the tests:

::

    conda activate pytsql
    cd pytsql
    pytest tests/integration/

Add the option ``--backend=mssql-freetds`` to the test command to run the tests using
the ``freetds`` driver.


Creating a grammar
------------------

``pytsql`` relies on parsing the sql script at hand. In order to do so, it uses
`antlr <https://www.antlr.org>`_, a parser generator. ``antlr`` expects grammar files
and produces parsing Python code.

If you want to adapt the grammar please have a look at ``pytsql/src/pytsql/grammar/tsql.g4``.
All other files in ``pytsql/src/pytsql/grammar`` are generated by ``antlr``. You can
generate these files by running

::

    java -jar /usr/local/lib/antlr-4.9.2-complete.jar -Dlanguage=Python3 tsql.g4

after adapting the path to your respective antlr jar file.
